{"ast":null,"code":"var _jsxFileName = \"D:\\\\vscode\\\\inotebook\\\\src\\\\context\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport noteContext from \"./noteContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const [notes, setNotes] = useState([]);\n\n  //get all notes\n  const getNotes = async () => {\n    //api call\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVmMDZjMGJiZTRlZjk2M2E3ODFmOTgzIn0sImlhdCI6MTcxMDI1NTI3NH0.02eC5cO9JsurbVV49FAO4O4SpSzYdNEtknFEHSb2RWg\"\n      }\n    });\n    const json = await response.json();\n    console.log(json);\n    setNotes(json);\n  };\n\n  //add a note\n\n  const addNote = async (title, description, tag) => {\n    //api call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVmMDZjMGJiZTRlZjk2M2E3ODFmOTgzIn0sImlhdCI6MTcxMDI1NTI3NH0.02eC5cO9JsurbVV49FAO4O4SpSzYdNEtknFEHSb2RWg\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const note = response.json();\n    setNotes(notes.concat(note));\n  };\n\n  //delete a note\n  const deleteNote = async id => {\n    //api call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVmMDZjMGJiZTRlZjk2M2E3ODFmOTgzIn0sImlhdCI6MTcxMDI1NTI3NH0.02eC5cO9JsurbVV49FAO4O4SpSzYdNEtknFEHSb2RWg\"\n      }\n    });\n    const json = response.json();\n    console.log(json);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n\n  //edit a note\n  const editNote = async (id, title, description, tag) => {\n    //api call\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVmMDZjMGJiZTRlZjk2M2E3ODFmOTgzIn0sImlhdCI6MTcxMDI1NTI3NH0.02eC5cO9JsurbVV49FAO4O4SpSzYdNEtknFEHSb2RWg\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    let newNotes = JSON.parse(JSON.stringify(notes));\n    for (let index = 0; index < notes.length; index++) {\n      const element = newNotes[index];\n      if (element._id === id) {\n        newNotes[index].title = title;\n        newNotes[index].description = description;\n        newNotes[index].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"GQLmJKrKSWtt27ULSmYSMpXke/c=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","noteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notes","setNotes","getNotes","response","fetch","method","headers","json","console","log","addNote","title","description","tag","body","JSON","stringify","note","concat","deleteNote","id","newNotes","filter","_id","editNote","parse","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/vscode/inotebook/src/context/NoteState.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport noteContext from \"./noteContext\";\r\n\r\nconst NoteState = (props) => {\r\n  const host=\"http://localhost:5000\"\r\n\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  //get all notes\r\n  const getNotes = async () => {\r\n    //api call\r\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVmMDZjMGJiZTRlZjk2M2E3ODFmOTgzIn0sImlhdCI6MTcxMDI1NTI3NH0.02eC5cO9JsurbVV49FAO4O4SpSzYdNEtknFEHSb2RWg\",\r\n        \r\n      }\r\n    });\r\n    const json= await response.json();\r\n    console.log(json)\r\n    setNotes(json)\r\n };\r\n\r\n\r\n\r\n  //add a note\r\n  \r\n  const addNote = async (title, description, tag) => {\r\n    //api call\r\n    const response = await fetch(`${host}/api/notes/addnote`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVmMDZjMGJiZTRlZjk2M2E3ODFmOTgzIn0sImlhdCI6MTcxMDI1NTI3NH0.02eC5cO9JsurbVV49FAO4O4SpSzYdNEtknFEHSb2RWg\",\r\n        \r\n      },\r\n      body: JSON.stringify({title,description,tag}),\r\n    });\r\n    const note= response.json();\r\n    setNotes(notes.concat(note));\r\n  };\r\n\r\n  //delete a note\r\n  const deleteNote =async (id) => {\r\n    //api call\r\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVmMDZjMGJiZTRlZjk2M2E3ODFmOTgzIn0sImlhdCI6MTcxMDI1NTI3NH0.02eC5cO9JsurbVV49FAO4O4SpSzYdNEtknFEHSb2RWg\",\r\n        \r\n      },\r\n  \r\n    });\r\n    const json= response.json();\r\n    console.log(json);\r\n\r\n    const newNotes = notes.filter((note) => {\r\n      return note._id !== id;\r\n    });\r\n    setNotes(newNotes);\r\n  };\r\n\r\n  //edit a note\r\n  const editNote = async (id, title, description, tag) => {\r\n    //api call\r\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjVmMDZjMGJiZTRlZjk2M2E3ODFmOTgzIn0sImlhdCI6MTcxMDI1NTI3NH0.02eC5cO9JsurbVV49FAO4O4SpSzYdNEtknFEHSb2RWg\",\r\n        \r\n      },\r\n      body: JSON.stringify({title,description,tag}),\r\n    });\r\n    const json= await response.json();\r\n\r\n    let newNotes=JSON.parse(JSON.stringify(notes))\r\n\r\n    for (let index = 0; index < notes.length; index++) {\r\n      const element = newNotes[index];\r\n      if (element._id === id) {\r\n        newNotes[index].title = title;\r\n        newNotes[index].description = description;\r\n        newNotes[index].tag = tag;\r\n        break;\r\n      }\r\n      \r\n \r\n    }\r\n    setNotes(newNotes)\r\n  };\r\n\r\n  return (\r\n    <noteContext.Provider value={{ notes, addNote, deleteNote, editNote,getNotes }}>\r\n      {props.children}\r\n    </noteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}